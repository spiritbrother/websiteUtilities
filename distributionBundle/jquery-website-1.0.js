// Generated by CoffeeScript 1.6.3
/*!
    Copyright see require on https://github.com/thaibault/require

    Conventions see require on https://github.com/thaibault/require

    @author t.sickert@gmail.com (Torben Sickert)
    @version 1.0 stable
    @fileOverview
    This module provides common logic for the whole web page.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function($) {
    /**
        @memberOf $
        @class
    */

    var Website, _ref;
    Website = (function(_super) {
      __extends(Website, _super);

      function Website() {
        _ref = Website.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      /**
          Saves default options for manipulating the default behaviour.
      
          @property {Object}
      */


      Website.prototype._options = {};

      /**
          Saves default options for manipulating the default behaviour.
      
          @property {Object}
      */


      Website.prototype._parentOptions = {
        logging: false,
        domNodeSelectorPrefix: 'body.{1}',
        onViewportMovesToTop: $.noop(),
        onViewportMovesAwayFromTop: $.noop(),
        onChangeToDesktopMode: $.noop(),
        onChangeToTabletMode: $.noop(),
        onChangeToSmartphoneMode: $.noop(),
        onChangeMediaQueryMode: $.noop(),
        onSwitchSection: $.noop(),
        onStartUpAnimationComplete: $.noop(),
        additionalPageLoadingTimeInMilliseconds: 0,
        mediaQueryCssIndicatorStyleType: 'border-left-style',
        googleTrackingCode: 'UA-0-0',
        mediaQueryCssIndicator: {
          desktop: 'dashed',
          tablet: 'solid',
          smartphone: 'dotted'
        },
        domNode: {
          top: 'div.navigation-bar',
          scrollToTopButtons: 'a[href="#top"]',
          startUpAnimationClassPrefix: '.start-up-animation-number-',
          windowLoadingCover: 'div.window-loading-cover',
          windowLoadingSpinner: 'div.window-loading-cover div'
        },
        startUpFadeInOptions: {
          easing: 'swing',
          duration: 'slow'
        },
        windowLoadingCoverFadeOutOptions: {
          easing: 'swing',
          duration: 'slow'
        },
        startUpAnimationElementDelayInMiliseconds: 100,
        windowLoadingSpinnerOptions: {
          lines: 9,
          length: 23,
          width: 11,
          radius: 40,
          corners: 1,
          rotate: 75,
          color: '#000',
          speed: 1.1,
          trail: 58,
          shadow: false,
          hwaccel: false,
          className: 'spinner',
          zIndex: 2e9,
          top: 'auto',
          left: 'auto'
        },
        language: {},
        scrollInLinearTime: false,
        scrollToTop: {
          duration: 'slow'
        }
      };

      /**
          Determines weather the view port is on top of the page.
      
          @property {Boolean}
      */


      Website.prototype._viewportIsOnTop = true;

      /**
          Describes the current mode defined by the css media queries.
      
          @property {String}
      */


      Website.prototype._currentMediaQueryMode = '';

      /**
          Saves the language handler instance.
      
          @property {$.Lang}
      */


      Website.prototype._languageHandler = null;

      /**
          Saves the class name for introspection.
      
          @property {String}
      */


      Website.prototype.__name__ = 'Website';

      /**
          Saves the generic javaScript code snippet to use google analytics
          statistics.
      
          @property {String}
      */


      Website.prototype.__googleAnalyticsCode = "(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create', '{1}', 'github.io');ga('send', 'pageview');";

      /**
          @description Initializes the interactive web application.
      
          @param {Object} options An options object.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype.initialize = function(options) {
        this._onViewportMovesToTop = this.debounce(this.getMethod(this._onViewportMovesToTop));
        this._onViewportMovesAwayFromTop = this.debounce(this.getMethod(this._onViewportMovesAwayFromTop));
        this._options = $.extend(true, this._parentOptions, this._options);
        Website.__super__.initialize.call(this, options);
        this.$domNode = this.grabDomNode(this._options.domNode);
        this._options.windowLoadingCoverFadeOutOptions.always = this.getMethod(this._handleStartUpEffects);
        this.$domNode.windowLoadingSpinner.spin(this._options.windowLoadingSpinnerOptions);
        this._bindScrollEvents().$domNode.parent.show();
        this.$domNode.window.ready(this.getMethod(this._removeLoadingCover));
        this._addNavigationEvents()._addMediaQueryChangeEvents()._triggerWindowResizeEvents()._handleGoogleAnalytics(this._options.trackingCode);
        if (this._options.language.logging == null) {
          this._options.language.logging = this._options.logging;
        }
        return this._languageHandler = $.Lang(this._options.language);
      };

      /**
          @description This method triggers if the viewport moves to top.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._onViewportMovesToTop = function() {
        var _this = this;
        if (this.$domNode.scrollToTopButtons.css('visibility') !== 'hidden') {
          this.$domNode.scrollToTopButtons.animate({
            bottom: '+=30',
            opacity: 0
          }, {
            duration: 'normal',
            always: function() {
              return _this.$domNode.scrollToTopButtons.css('bottom', '-=30');
            }
          });
        }
        return this;
      };

      /**
          @description This method triggers if the viewport moves away from
                       top.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._onViewportMovesAwayFromTop = function() {
        if (this.$domNode.scrollToTopButtons.css('visibility') !== 'hidden') {
          this.$domNode.scrollToTopButtons.css({
            bottom: '+=30',
            display: 'block',
            opacity: 0
          }).animate({
            bottom: '-=30',
            queue: false,
            opacity: 1
          }, {
            duration: 'normal'
          });
        }
        return this;
      };

      /**
          @description This method triggers if the responsive design
                       switches to another mode.
      
          @param {String} oldMode Saves the previous mode.
          @param {String} newMode Saves the new mode.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._onChangeMediaQueryMode = function(oldMode, newMode) {
        return this;
      };

      /**
          @description This method triggers if the responsive design
                       switches to desktop mode.
      
          @param {String} oldMode Saves the previous mode.
          @param {String} newMode Saves the new mode.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._onChangeToDesktopMode = function(oldMode, newMode) {
        return this;
      };

      /**
          @description This method triggers if the responsive design
                       switches to tablet mode.
      
          @param {String} oldMode Saves the previous mode.
          @param {String} newMode Saves the new mode.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._onChangeToTabletMode = function(oldMode, newMode) {
        return this;
      };

      /**
          @description This method triggers if the responsive design
                       switches to smartphone mode.
      
          @param {String} oldMode Saves the previous mode.
          @param {String} newMode Saves the new mode.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._onChangeToSmartphoneMode = function(oldMode, newMode) {
        return this;
      };

      /**
          @description This method triggers if we change the current section.
      
          @param {String} sectionName Contains the new section name.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._onSwitchSection = function(sectionName) {
        return this;
      };

      /**
          @description This method is complete if last startup animation
                       was initialized.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._onStartUpAnimationComplete = function() {
        return this;
      };

      /**
          @description This method adds triggers for responsive design
                       switches.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._addMediaQueryChangeEvents = function() {
        this.on(this.$domNode.window, 'resize', this.getMethod(this._triggerWindowResizeEvents));
        return this;
      };

      /**
          @description This method triggers if the responsive design
                       switches its mode.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._triggerWindowResizeEvents = function() {
        var _this = this;
        $.each(this._options.mediaQueryCssIndicator, function(mode, cssValue) {
          if (_this.$domNode.parent.css(_this._options.mediaQueryCssIndicatorStyleType) === cssValue && mode !== _this._currentMediaQueryMode) {
            _this.fireEvent.apply(_this, [_this.stringFormat('changeMediaQueryMode', mode.substr(0, 1).toUpperCase() + mode.substr(1)), false, _this, _this._currentMediaQueryMode, mode].concat(_this.argumentsObjectToArray(arguments)));
            _this.fireEvent.apply(_this, [_this.stringFormat('changeTo{1}Mode', mode.substr(0, 1).toUpperCase() + mode.substr(1)), false, _this, _this._currentMediaQueryMode, mode].concat(_this.argumentsObjectToArray(arguments)));
            return _this._currentMediaQueryMode = mode;
          }
        });
        return this;
      };

      /**
          @description This method triggers if view port arrives at special
                       areas.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._bindScrollEvents = function() {
        var _this = this;
        this.on(window, 'scroll', function() {
          if (_this.$domNode.window.scrollTop()) {
            if (_this._viewportIsOnTop) {
              _this._viewportIsOnTop = false;
              return _this.fireEvent.apply(_this, ['viewportMovesAwayFromTop', false, _this].concat(_this.argumentsObjectToArray(arguments)));
            }
          } else if (!_this._viewportIsOnTop) {
            _this._viewportIsOnTop = true;
            return _this.fireEvent.apply(_this, ['viewportMovesToTop', false, _this].concat(_this.argumentsObjectToArray(arguments)));
          }
        });
        return this;
      };

      /**
          @description This method triggers after window is loaded.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._removeLoadingCover = function() {
        var _this = this;
        window.setTimeout(function() {
          /*
              Hide startup animation dom nodes to show them step
              by step.
          */

          $('[class^="' + _this.sliceDomNodeSelectorPrefix(_this._options.domNode.startUpAnimationClassPrefix).substr(1) + '"]').hide();
          return _this.$domNode.windowLoadingCover.fadeOut(_this._options.windowLoadingCoverFadeOutOptions);
        }, this._options.additionalPageLoadingTimeInMilliseconds);
        return this;
      };

      /**
          @description This method handles the given start up effect step.
      
          @param {Number} elementNumber The current start up step.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._handleStartUpEffects = function(elementNumber) {
        var _this = this;
        this.$domNode.windowLoadingSpinner.spin(false);
        if (!$.isNumeric(elementNumber)) {
          elementNumber = 1;
        }
        window.setTimeout((function() {
          $(_this._options.domNode.startUpAnimationClassPrefix + elementNumber).fadeIn(_this._options.startUpFadeInOptions);
          if (($(_this._options.domNode.startUpAnimationClassPrefix + (elementNumber + 1)).length)) {
            return _this._handleStartUpEffects(elementNumber + 1);
          } else {
            return _this.fireEvent('startUpAnimationComplete');
          }
        }), this._options.startUpAnimationElementDelayInMiliseconds);
        return this;
      };

      /**
          @description This method adds triggers to switch section.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._addNavigationEvents = function() {
        var _this = this;
        this.$domNode.window.hashchange(function() {
          return _this.fireEvent('switchSection', false, _this, window.location.hash);
        });
        return this._handleScrollToTopButton();
      };

      /**
          @description Adds trigger to scroll top buttons.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._handleScrollToTopButton = function() {
        var _this = this;
        this.on(this.$domNode.scrollToTopButtons, 'click', function(event) {
          event.preventDefault();
          return _this._scrollToTop();
        });
        this.$domNode.scrollToTopButtons.hide();
        return this;
      };

      /**
          @description Scrolls to top of page. Runs the given function
                       after viewport arrives.
      
          @param {Function} onAfter Callback to call after effect has
                                    finished.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._scrollToTop = function(onAfter) {
        var distanceToScroll, distanceToTop, menuHeight;
        if (onAfter == null) {
          onAfter = $.noop();
        }
        this._options.scrollToTop.onAfter = onAfter;
        if (this._options.scrollInLinearTime) {
          distanceToTop = this.$domNode.window.scrollTop();
          menuHeight = this.$domNode.top.find('div.navbar').outerHeight();
          distanceToScroll = distanceToTop + menuHeight;
          if (distanceToTop < menuHeight) {
            distanceToScroll = distanceToScroll + menuHeight - distanceToTop;
          }
          this._options.scrollToTop.duration = distanceToScroll;
          $.scrollTo({
            top: "-=" + distanceToScroll + "px",
            left: '+=0'
          }, this._options.scrollToTop);
        } else {
          $.scrollTo({
            top: 0,
            left: 0
          }, this._options.scrollToTop);
        }
        return this;
      };

      /**
          @description Scrolls to top of page. Runs the given function
                       after viewport arrives.
      
          @param {String} trackingCode Google's javaScript embedding code
                                       snippet.
      
          @returns {$.Website} Returns the current instance.
      */


      Website.prototype._handleGoogleAnalytics = function(trackingCode) {
        var exception;
        try {
          (new Function(this.stringFormat(this.__googleAnalyticsCode, trackingCode)))();
        } catch (_error) {
          exception = _error;
          this.warn('Problem in google analytics code snippet: {1}', exception);
        }
        return this;
      };

      return Website;

    })($.Tools["class"]);
    /** @ignore*/

    $.Website = function() {
      return $.Tools().controller(Website, arguments);
    };
    /** @ignore*/

    return $.Website["class"] = Website;
  })(this.jQuery);

}).call(this);
